<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Investment Simulator - Stock Exchange</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #121212;
            color: #ffffff;
            margin: 0;
            padding: 0;
            display: flex;
            height: 100vh;
            overflow: hidden;
        }

        /* Global Container */
        .container {
            display: flex;
            width: 100%;
        }

        /* Sidebar (Portfolio) */
        .sidebar {
            width: 25%;
            background-color: #1e1e1e;
            padding: 20px;
            box-shadow: 2px 0px 10px rgba(0, 0, 0, 0.3);
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .sidebar h2 {
            color: #008cba; /* Blue color for header */
        }

        .sidebar table {
            width: 100%;
            border-collapse: collapse;
        }

        .sidebar table th, .sidebar table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #333;
        }

        /* Main Content */
        .main-content {
            flex-grow: 1;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        .main-content h1 {
            color: #008cba; /* Blue color for main title */
            font-size: 1.8rem;
        }

        /* Stock Trading Section */
        .trade-section {
            background-color: #1e1e1e;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
        }

        .trade-section label {
            font-size: 1rem;
            color: #ffffff;
        }

        .trade-section input, .trade-section button {
            width: 100%;
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            border: none;
            font-size: 1rem;
        }

        .trade-section input {
            background-color: #2a2a2a;
            color: #ffffff;
        }

        .trade-section button {
            background-color: #008cba; /* Blue for buttons */
            color: #fff;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .trade-section button:hover {
            background-color: #007bb5; /* Darker blue on hover */
        }

        /* Suggestion Box Styling */
        #suggestions {
            background-color: #2a2a2a;
            border-radius: 5px;
            margin-top: 5px;
            max-height: 200px;
            overflow-y: auto;
        }

        .suggestion-item {
            padding: 10px;
            border-bottom: 1px solid #333;
            color: #fff;
            cursor: pointer;
        }

        .suggestion-item:hover {
            background-color: #333;
        }

        /* TradingView Chart Section */
        #tradingview-widget {
            margin-top: 20px;
            background-color: #1e1e1e;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
        }

        /* Transaction History */
        .transaction-history {
            margin-top: 20px;
            background-color: #1e1e1e;
            padding: 20px;
            border-radius: 10px;
            height: 200px;
            overflow-y: auto;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
        }

        .transaction-history table {
            width: 100%;
            border-collapse: collapse;
        }

        .transaction-history th, .transaction-history td {
            padding: 10px;
            border-bottom: 1px solid #333;
        }

        /* Budget Section */
        #budget-section {
            background-color: #008cba; /* Blue background for visibility */
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            margin-bottom: 10px;
        }

        #budget-section h2 {
            margin: 0;
            color: #fff;
            font-size: 1.5rem;
        }

        /* Responsive Design */
        @media screen and (max-width: 1200px) {
            .sidebar {
                width: 30%;
            }

            .main-content {
                padding: 10px;
            }

            .trade-section, .transaction-history {
                margin-bottom: 15px;
            }
        }

        @media screen and (max-width: 768px) {
            body {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
                height: auto;
            }

            .main-content {
                width: 100%;
            }

            .trade-section {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Sidebar (Portfolio) -->
        <div class="sidebar">
            <div>
                <h2>Your Portfolio</h2>
                <div class="table-container">
                    <table id="portfolioTable">
                        <thead>
                            <tr>
                                <th>Symbol</th>
                                <th>Quantity</th>
                                <th>Purchase Price</th>
                                <th>Current Price</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Portfolio will be populated here -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div id="budget-section">
                <h2>Budget: $<span id="budget">10000.00</span></h2>
            </div>
        </div>

        <!-- Main Content Area -->
        <div class="main-content">
            <h1>Investment Simulator</h1>
            <!-- Trading Section -->
            <div class="trade-section">
                <label for="stockSymbol">Stock Symbol</label>
                <input type="text" id="stock-symbol" onkeyup="filterSymbols()" placeholder="AAPL, TSLA, NOC, etc.">
                <div id="suggestions"></div> <!-- Suggestions Dropdown -->

                <label for="quantity">Quantity</label>
                <input type="number" id="quantity" placeholder="Enter Quantity">
                <button onclick="buyStock()">Buy</button>
                <button onclick="sellStock()">Sell</button>

                <h3>Current Price: $<span id="currentPrice">0.00</span></h3>
            </div>

            <!-- TradingView Widget Container -->
            <div id="tradingview-widget"></div>

            <!-- Transaction History -->
            <div class="transaction-history">
                <h2>Transaction History</h2>
                <table id="transactionTable">
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Symbol</th>
                            <th>Quantity</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Transactions will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        let budget = 10000;
        let portfolio = {};
        const apiKey = 'crvr62hr01qkji45on7gcrvr62hr01qkji45on80';
        let stockList = [];

        // Fetch stock list from Finnhub API
        async function fetchStockList() {
            const url = `https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${apiKey}`;
            const response = await fetch(url);
            const data = await response.json();
            stockList = data.map(stock => ({
                symbol: stock.symbol,
                description: stock.description || stock.displaySymbol
            }));
        }

        fetchStockList(); // Fetch on load

        // Fetch stock price using Finnhub API
        async function fetchStockPrice(symbol) {
            const url = `https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${apiKey}`;
            const response = await fetch(url);
            const data = await response.json();
            return data.c; // Current price
        }

        // Auto-suggest stock symbols
        function filterSymbols() {
            const input = $('#stock-symbol').val().toUpperCase();
            const suggestionsDiv = $('#suggestions');
            suggestionsDiv.empty();

            if (input) {
                const filteredStocks = stockList.filter(stock => 
                    stock.symbol.toUpperCase().includes(input) || 
                    stock.description.toUpperCase().includes(input)
                );

                filteredStocks.sort((a, b) => {
                    if (a.symbol.toUpperCase() === input) return -1;
                    if (b.symbol.toUpperCase() === input) return 1;
                    return 0;
                });

                filteredStocks.forEach(stock => {
                    const highlightedDescription = highlightMatch(stock.description, input);
                    const div = $('<div>')
                        .html(`${highlightMatch(stock.symbol, input)} - ${highlightedDescription}`)
                        .addClass('suggestion-item')
                        .on('click', function () {
                            $('#stock-symbol').val(stock.symbol);
                            suggestionsDiv.empty();
                            searchStock();
                            showTradingViewWidget(stock.symbol);
                        });
                    suggestionsDiv.append(div);
                });
            }
        }

        // Highlight matches in the suggestions
        function highlightMatch(text, input) {
            const regex = new RegExp(`(${input})`, 'gi');
            return text.replace(regex, '<strong>$1</strong>');
        }

        // Search for selected stock
        async function searchStock() {
            const symbol = $('#stock-symbol').val().toUpperCase();
            if (symbol) {
                const price = await fetchStockPrice(symbol);
                $('#currentPrice').text(price ? price.toFixed(2) : '0.00');
            }
        }

        // Function to display TradingView widget
        function showTradingViewWidget(symbol) {
            const widgetContainer = document.getElementById('tradingview-widget');
            widgetContainer.innerHTML = ''; // Clear previous widget

            new TradingView.MediumWidget({
                symbols: [[symbol]],
                chartOnly: false,
                width: "100%",
                height: 400,
                locale: "en",
                colorTheme: "dark",
                gridLineColor: "#F0F3FA",
                trendLineColor: "#2196F3",
                fontColor: "#787B86",
                underLineColor: "rgba(55, 166, 239, 0.15)",
                isTransparent: false,
                autosize: true,
                container_id: "tradingview-widget"
            });
        }

        // Watch stock symbol input to auto-fetch the latest price
        $('#stock-symbol').on('input', searchStock);

        // Buy stock function
        async function buyStock() {
            const symbol = $('#stock-symbol').val().toUpperCase();
            const quantity = parseInt($('#quantity').val());
            const price = await fetchStockPrice(symbol);

            if (quantity && price) {
                const cost = quantity * price;

                if (cost <= budget) {
                    budget -= cost;
                    $('#budget').text(budget.toFixed(2));

                    if (!portfolio[symbol]) {
                        portfolio[symbol] = { quantity: 0, purchasePrice: price };
                    }

                    portfolio[symbol].quantity += quantity;
                    portfolio[symbol].purchasePrice = price; // Store the latest purchase price

                    updatePortfolioTable();
                    addTransaction('Buy', symbol, quantity, price);
                } else {
                    alert('Not enough budget!');
                }
            } else {
                alert('Invalid input!');
            }
        }

        // Sell stock function
        async function sellStock() {
            const symbol = $('#stock-symbol').val().toUpperCase();
            const quantity = parseInt($('#quantity').val());
            const price = await fetchStockPrice(symbol);

            if (portfolio[symbol] && portfolio[symbol].quantity >= quantity && quantity > 0) {
                const earnings = quantity * price;
                portfolio[symbol].quantity -= quantity;
                budget += earnings;

                $('#budget').text(budget.toFixed(2));

                if (portfolio[symbol].quantity === 0) {
                    delete portfolio[symbol];
                }

                updatePortfolioTable();
                addTransaction('Sell', symbol, quantity, price);
            } else {
                alert('Invalid sell order!');
            }
        }

        // Update the portfolio table
        async function updatePortfolioTable() {
            const table = document.getElementById('portfolioTable').getElementsByTagName('tbody')[0];
            table.innerHTML = '';

            for (const symbol in portfolio) {
                const currentPrice = await fetchStockPrice(symbol);
                const row = table.insertRow();
                row.insertCell(0).innerText = symbol;
                row.insertCell(1).innerText = portfolio[symbol].quantity;
                row.insertCell(2).innerText = portfolio[symbol].purchasePrice.toFixed(2);
                row.insertCell(3).innerText = currentPrice.toFixed(2);
            }
        }

        // Add transaction to the transaction history
        function addTransaction(type, symbol, quantity, price) {
            const table = document.getElementById('transactionTable').getElementsByTagName('tbody')[0];
            const row = table.insertRow();
            row.insertCell(0).innerText = type;
            row.insertCell(1).innerText = symbol;
            row.insertCell(2).innerText = quantity;
            row.insertCell(3).innerText = price.toFixed(2);
        }

        // Refresh stock prices every hour
        setInterval(() => {
            for (const symbol in portfolio) {
                updatePortfolioTable(); // Refresh portfolio prices
            }
            $('#stock-symbol').trigger('input'); // Refresh current price display
        }, 3600000); // 3600000 ms = 1 hour

    </script>

    <!-- TradingView Widget Script -->
    <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>
</body>
</html>








