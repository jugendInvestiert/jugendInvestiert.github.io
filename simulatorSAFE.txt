<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Investment Simulator - JugendInvestiert</title>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap" rel="stylesheet">
    <!-- Font Awesome Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <!-- Firebase SDKs -->
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-database-compat.js"></script>
    <!-- TradingView Widget -->
    <script src="https://s3.tradingview.com/tv.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* SIMULATOR NEW DESIGN STYLES */
        *, *::before, *::after {
            box-sizing: border-box;
        }
        html, body {
            font-family: 'Poppins', Arial, sans-serif;
            margin: 0;
            padding: 0 0 30px 0;            /* Added padding-bottom: 30px */
            background-color: #101820;
            color: white;
            overflow-x: hidden;
        }
        a {
            color: #007bff;
            text-decoration: none;
        }
        /* Navbar Styles */
        .navbar {
            background-color: #1B2631;
            padding: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 1000;
        }
        .navbar .logo {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        .navbar img {
            height: 50px;
            width: 50px;
            border-radius: 10px;
        }
        .navbar h1 {
            font-size: 24px;
            margin: 0;
            font-weight: bold;
        }
        /* Main Container Styles */
        .container {
            display: flex;
            flex-direction: column;
            padding: 15px 15px 30px 15px;   /* Added padding-bottom: 30px */
            gap: 15px;
            margin-top: 80px;
            align-items: center;
            max-width: 100%;
        }
        /* Account Summary Styles */
        .account-summary {
            background-color: #1B2631;
            padding: 10px;
            border-radius: 15px;
            display: flex;
            justify-content: space-around;
            text-align: center;
            width: 100%;
            max-width: 1200px;
            gap: 10px;
        }
        .account-summary .summary-item {
            flex: 1;
            min-width: 100px;
            background-color: #273746;
            padding: 10px;
            border-radius: 10px;
        }
        .account-summary .summary-item h3 {
            font-size: 0.9rem;
            font-weight: 400;
            color: #cccccc;
            margin-bottom: 5px;             
        }
        .account-summary .summary-item p {
            font-size: 1.2rem;
            font-weight: 700;
            margin: 0;
            color: #007bff;
        }
        .total-profit {
            font-size: 1.5rem;
            font-weight: 700;
        }
        .profit-positive {
            color: #4caf50;
        }
        .profit-negative {
            color: #f44336;
        }
        /* Trade and Widget Container */
        .trade-widget-container {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            justify-content: center;
            width: 100%;
            max-width: 1200px;
        }
        /* Trade Section Styles */
        .trade-section {
            background-color: #1B2631;
            padding: 15px;
            border-radius: 15px;
            flex: 1;
            min-width: 300px;
            max-width: 600px;
            box-sizing: border-box;
            order: 1;
            position: relative;
        }
        .trade-section h2 {
            font-size: 1.5rem;
            margin-bottom: 10px;
            font-weight: 700;
            text-align: center;
        }
        .trade-section label {
            display: block;
            margin-bottom: 5px;
            font-size: 0.9rem;
            color: #cccccc;
            text-align: left;
        }
        .search-container {
            position: relative; /* To position suggestions correctly */
        }
        .trade-section input {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #2e2e2e;
            border-radius: 5px;
            background-color: #101820;
            color: #ffffff;
            font-size: 1rem;
        }
        .trade-section input::placeholder {
            color: #555;
        }
        .trade-section input:focus {
            outline: none;
            border-color: #007bff;
        }
        #buy-button {
            width: 100%;
            padding: 15px;
            background-color: #007bff;
            border: none;
            border-radius: 5px;
            color: #ffffff;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s, box-shadow 0.3s;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
            margin-top: 10px;
        }
        #buy-button:hover {
            background-color: #0056b3;
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.4);
        }
        /* Suggestions Styles */
        #suggestions {
            background-color: #1B2631;
            border: 1px solid #2e2e2e;
            border-radius: 5px;
            max-height: 200px;
            overflow-y: auto;
            position: absolute;
            top: 100%; /* Position below the input field */
            left: 0;
            width: 100%;
            z-index: 10;
            display: none; /* Hidden by default */
        }
        .suggestion-item {
            padding: 10px;
            cursor: pointer;
        }
        .suggestion-item:hover {
            background-color: #2e2e2e;
        }
        /* Highlighted Text in Suggestions */
        .suggestion-item strong {
            color: #ffffff; /* White highlight for better visibility */
        }
        /* TradingView Widget Styles */
        #tradingview-widget {
            border: none;                   /* Removed border */
            box-shadow: none;               /* Removed box-shadow */
            border-radius: 15px;
            overflow: hidden;
            flex: 1;
            min-width: 300px;
            height: 400px;
            max-width: 600px;
            display: block;
            order: 2;
            background-color: #1B2631;      /* Matches the container's background */
            padding: 0;                      /* Ensure no padding */
            margin-bottom: 0;                /* Removed margin-bottom */
        }
        /* Portfolio Section Styles */
        .portfolio-section {
            background-color: #1B2631;
            padding: 15px;
            border-radius: 15px;
            width: 100%;
            max-width: 1200px;
            box-sizing: border-box;
            overflow-x: auto; /* Added to allow horizontal scrolling */
        }
        .portfolio-section h2 {
            font-size: 1.5rem;
            margin-bottom: 10px;
            font-weight: 700;
            text-align: center;
        }
        .portfolio-table {
            width: 100%;
            border-collapse: collapse;
            min-width: 600px; /* Ensures table can be wider than viewport */
        }
        .portfolio-table th, .portfolio-table td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #2e2e2e;
            font-size: 0.9rem;
        }
        .portfolio-table th {
            color: #cccccc;
            font-weight: 700;
        }
        .portfolio-table td {
            font-size: 0.9rem;
        }
        .portfolio-table button {
            padding: 8px 12px; /* Increased padding for larger size */
            background-color: #f44336;
            color: #fff;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 0.9rem; /* Increased font size */
            font-weight: bold; /* Made text bold */
            width: auto; /* Default width */
        }
        .portfolio-table button:hover {
            background-color: #d32f2f;
        }
        /* Make the 'Aktion' (Action) column sticky */
        .portfolio-table th:last-child,
        .portfolio-table td:last-child {
            position: sticky;
            right: 0;
            background-color: #1B2631; /* Same as table background */
            z-index: 2; /* Ensures it stays above other cells */
            /* Option A: Remove box-shadow */
            /* box-shadow: -2px 0 5px rgba(0, 0, 0, 0.5); */
            
            /* Option B: Reduce box-shadow */
            box-shadow: -1px 0 3px rgba(0, 0, 0, 0.3);
        }
        /* Message Styles */
        .message {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background-color: #1B2631;
            padding: 10px;
            border-radius: 5px;
            color: #fff;
            z-index: 2000;
            display: flex;
            align-items: center;
            gap: 10px;
            animation: fadeInOut 4s forwards;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
            font-size: 0.9rem;
        }
        .message i {
            font-size: 1.2rem;
        }
        .message.success {
            border-left: 5px solid #4caf50;
        }
        .message.error {
            border-left: 5px solid #f44336;
        }
        @keyframes fadeInOut {
            0% { opacity: 0; transform: translateY(20px); }
            10% { opacity: 1; transform: translateY(0); }
            90% { opacity: 1; transform: translateY(0); }
            100% { opacity: 0; transform: translateY(20px); }
        }
        /* Loader Styles */
        #loader {
            display: none;
            position: fixed;
            z-index: 3000;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            color: #007bff;
            font-size: 2rem;
        }
        /* Responsive Design */
        @media screen and (max-width: 768px) {
            .navbar {
                padding: 10px;
            }
            .navbar img {
                height: 40px;
                width: 40px;
            }
            .navbar h1 {
                font-size: 20px;
            }
            .container {
                margin-top: 70px;
                padding: 10px 10px 30px 10px; /* Ensure padding-bottom remains */
            }
            .account-summary {
                display: grid;
                grid-template-columns: 1fr 1fr;
                grid-template-rows: auto auto;
                gap: 5px;
                max-width: 600px;
            }
            .trade-widget-container {
                flex-direction: column;
                max-width: 600px;
            }
            .trade-section {
                order: 2;
                padding: 10px;
                max-width: 600px;
            }
            #tradingview-widget {
                order: 1;
                /* Removed margin-bottom: 20px; */
                margin-bottom: 0;                /* Set margin-bottom to 0 */
                width: 100%;
                height: 300px;
                max-width: 600px;
                padding: 0;                      /* Ensure no padding */
            }
            .portfolio-section {
                padding: 10px;
            }
            .portfolio-section h2 {
                font-size: 1.2rem;
                margin-bottom: 10px;
            }
            .portfolio-table th, .portfolio-table td {
                padding: 6px;
                font-size: 0.8rem;
            }
            /* Remove sticky positioning for 'Aktion' column on mobile */
            .portfolio-table th:last-child,
            .portfolio-table td:last-child {
                position: static;            /* Changed from sticky to static */
                box-shadow: none;            /* Remove box-shadow */
            }
            /* Make 'Verkaufen' button full width on mobile */
            .portfolio-table button {
                width: 100%;                 /* Set button to full width */
                box-sizing: border-box;
            }
        }
    </style>
</head>
<body>

    <!-- NAVBAR -->
    <div class="navbar">
        <div class="logo">
            <img src="logo.jpg" alt="JugendInvestiert Logo">
            <h1>JugendInvestiert</h1>
        </div>
    </div>

    <!-- MAIN CONTAINER -->
    <div class="container">

        <!-- ACCOUNT SUMMARY -->
        <div class="account-summary">
            <div class="summary-item">
                <h3>Portfolio Wert</h3>
                <p>$<span id="portfolioValue">0.00</span></p>
            </div>
            <div class="summary-item">
                <h3>Bargeldsaldo</h3>
                <p>$<span id="budget">10000.00</span></p>
            </div>
            <div class="summary-item">
                <h3>Gesamter Gewinn</h3>
                <p id="totalProfit" class="total-profit">$0.00</p>
            </div>
            <div class="summary-item">
                <h3>Gewinn/Verlust %</h3>
                <p id="totalProfitPercent" class="total-profit">0.00%</p>
            </div>
        </div>

        <!-- TRADE + WIDGET -->
        <div class="trade-widget-container">
            <div class="trade-section" id="trade-section">
                <h2>Aktien Handeln</h2>

                <label for="stock-symbol">Aktiensymbol oder Firmenname</label>
                <div class="search-container">
                    <input
                        type="text"
                        id="stock-symbol"
                        placeholder="z.B., AAPL, Apple Inc."
                        autocomplete="off"
                        onkeyup="debouncedFilterSymbols()"
                    >
                    <div id="suggestions"></div>
                </div>

                <label for="quantity">Anzahl</label>
                <input
                    type="number"
                    id="quantity"
                    placeholder="Anzahl eingeben"
                    min="1"
                    step="1"
                >

                <div id="current-price" style="margin-top: 10px;">
                    <h3>Aktueller Preis: $<span id="currentPrice">0.00</span></h3>
                </div>

                <button id="buy-button" onclick="buyStock()"><b>Kaufen</b></button>
            </div>

            <div id="tradingview-widget"></div>
        </div>

        <!-- PORTFOLIO -->
        <div class="portfolio-section">
            <h2>Dein Portfolio</h2>
            <table class="portfolio-table">
                <thead>
                    <tr>
                        <th>Symbol</th>
                        <th>Anzahl</th>
                        <!-- Changed "Durchschn. Preis" to "Kaufpreis" -->
                        <th>Kaufpreis</th>
                        <th>Akt. Preis</th>
                        <th>Gewinn/Verlust</th>
                        <th>Aktion</th>
                    </tr>
                </thead>
                <tbody id="portfolioTableBody">
                    <!-- Portfolio items will be injected here -->
                </tbody>
            </table>
        </div>

    </div>

    <!-- LOADER & MESSAGE CONTAINER -->
    <div id="loader"><i class="fas fa-spinner fa-spin"></i></div>
    <div id="message-container"></div>

    <!-- JavaScript -->
    <script>
        /********************************************************
 * 1) FINNHUB API KEY
 ********************************************************/
const finnhubApiKey = "cs1uv71r01qpjum5l9agcs1uv71r01qpjum5l9b0"; // <-- Ersetze mit deinem Finnhub API-Schlüssel

/********************************************************
 * 2) FIREBASE CONFIGURATION
 ********************************************************/
const firebaseConfig = {
    apiKey: "AIzaSyDmEUCl7sWzBI7N78HgcgBRcRAkTYbtm5g",
    authDomain: "jugendinvestiert-5f6eb.firebaseapp.com",
    databaseURL: "https://jugendinvestiert-5f6eb-default-rtdb.firebaseio.com",
    projectId: "jugendinvestiert-5f6eb",
    storageBucket: "jugendinvestiert-5f6eb.appspot.com",
    messagingSenderId: "432595310987",
    appId: "1:432595310987:web:fd9f7975d5e87f1fe1378e",
    measurementId: "G-5ENQC9KQBY"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const database = firebase.database();

/********************************************************
 * 3) GLOBALS
 ********************************************************/
let budget = 10000;
let portfolio = {}; // { SYMBOL: { quantity: Number, totalInvested: Number } }
let stockList = [];
let isBuying = false;
let currentSymbol = ''; // To track the selected symbol
const initialCapital = 10000; // Ursprüngliches Kapital

/********************************************************
 * 4) RECEIVE AUTH_DATA FROM PARENT
 ********************************************************/
window.addEventListener('message', (event) => {
    // Optional: Sicherheitsüberprüfung des Ursprungs
    // if (event.origin !== 'https://deine-domain.com') return;

    if (event.data.type === 'AUTH_DATA') {
        console.log("Simulator received AUTH_DATA:", event.data);
        budget = typeof event.data.budget === 'number' ? event.data.budget : 10000;
        portfolio = event.data.portfolio && typeof event.data.portfolio === 'object' ? event.data.portfolio : {};

        // Normalize portfolio symbols to uppercase
        portfolio = normalizePortfolioSymbols(portfolio);

        updateBudget();
        updatePortfolioTable();
        console.log("AUTH_DATA verarbeitet.");
    }
});

/********************************************************
 * 5) SEND PORTFOLIO_UPDATE TO PARENT
 ********************************************************/
function sendPortfolioUpdate() {
    const data = {
        type: 'PORTFOLIO_UPDATE',
        budget: budget,
        portfolio: portfolio
    };
    console.log("Sending PORTFOLIO_UPDATE:", data);
    window.parent.postMessage(data, '*'); // Für Sicherheit: Ersetze '*' mit deiner spezifischen Herkunft
}

/********************************************************
 * 6) FETCH STOCK LIST
 ********************************************************/
async function fetchStockList() {
    const url = `https://finnhub.io/api/v1/stock/symbol?exchange=US&token=${finnhubApiKey}`;
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP-Fehler! Status: ${response.status}`);
        }
        const data = await response.json();
        stockList = data.map(stock => ({
            symbol: stock.symbol.toUpperCase(),
            description: stock.description
        }));
        console.log("Aktienliste abgerufen:", stockList.length, "Aktien");
    } catch (error) {
        console.error("Fehler beim Abrufen der Aktienliste:", error);
        displayErrorMessage("Fehler beim Abrufen der Aktienliste. Bitte versuche es später erneut.");
    }
}

fetchStockList();

/********************************************************
 * 7) DEBOUNCE & FILTER SYMBOLS
 ********************************************************/
function debounce(func, delay) {
    let debounceTimer;
    return function() {
        const context = this;
        const args = arguments;
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => func.apply(context, args), delay);
    }
}
const debouncedFilterSymbols = debounce(filterSymbols, 300);

function filterSymbols() {
    const input = document.getElementById('stock-symbol').value.toUpperCase();
    const suggestions = document.getElementById('suggestions');
    suggestions.innerHTML = '';
    if (input === '') {
        suggestions.style.display = 'none';
        return;
    }

    // Improved matching logic: exact matches and symbols starting with input first
    const exactMatches = stockList.filter(stock => stock.symbol === input || stock.description.toUpperCase() === input);
    const startsWithMatches = stockList.filter(stock => (stock.symbol.startsWith(input) || stock.description.toUpperCase().startsWith(input)) && !exactMatches.includes(stock));
    const includesMatches = stockList.filter(stock => (stock.symbol.includes(input) || stock.description.toUpperCase().includes(input)) && !exactMatches.includes(stock) && !startsWithMatches.includes(stock));

    // Combine results, avoiding duplicates
    const combined = [...exactMatches, ...startsWithMatches, ...includesMatches];
    const uniqueCombined = Array.from(new Set(combined.map(stock => stock.symbol))).map(symbol => combined.find(stock => stock.symbol === symbol));

    // Limit to top 5 suggestions
    const filtered = uniqueCombined.slice(0, 5);

    if (filtered.length === 0) {
        suggestions.style.display = 'none';
        return;
    }

    filtered.forEach(stock => {
        const div = document.createElement('div');
        div.classList.add('suggestion-item');
        const boldedSymbol = boldMatch(stock.symbol, input);
        const boldedDescription = boldMatch(stock.description.toUpperCase(), input);
        div.innerHTML = `${boldedSymbol} - ${boldedDescription}`;
        div.onclick = () => selectSymbol(stock.symbol);
        suggestions.appendChild(div);
    });

    suggestions.style.display = 'block';
}

function boldMatch(text, input) {
    const regex = new RegExp(`(${input})`, 'gi');
    return text.replace(regex, '<strong>$1</strong>');
}

/********************************************************
 * 8) SELECT SYMBOL & CREATE TRADINGVIEW WIDGET
 ********************************************************/
async function selectSymbol(symbol) {
    symbol = symbol.toUpperCase();
    document.getElementById('stock-symbol').value = symbol;
    const price = await fetchStockPrice(symbol);
    document.getElementById('currentPrice').innerText = price > 0 ? price.toFixed(2) : "0.00";
    document.getElementById('suggestions').style.display = 'none';
    currentSymbol = symbol;
    createTradingViewWidget(symbol);
}

async function fetchStockPrice(symbol) {
    const url = `https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${finnhubApiKey}`;
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP-Fehler! Status: ${response.status}`);
        }
        const data = await response.json();
        if (!data || typeof data.c !== 'number') {
            console.warn("Keine Preisdaten für Symbol:", symbol);
            return 0;
        }
        return parseFloat(data.c);
    } catch (error) {
        console.error(`Fehler beim Abrufen des Preises für ${symbol}:`, error);
        displayErrorMessage(`Fehler beim Abrufen des Preises für ${symbol}.`);
        return 0;
    }
}

function createTradingViewWidget(symbol) {
    const widgetContainer = document.getElementById('tradingview-widget');
    widgetContainer.innerHTML = '';
    new TradingView.MediumWidget({
        symbols: [[symbol]],
        chartOnly: false,
        width: "100%",
        height: 400,
        locale: "de",
        colorTheme: "dark",
        gridLineColor: "#F0F3FA",
        trendLineColor: "#2196F3",
        fontColor: "#787B86",
        underLineColor: "rgba(55, 166, 239, 0.15)",
        isTransparent: true, /* Changed to true to remove default background */
        autosize: true,
        container_id: "tradingview-widget"
    });
}

/********************************************************
 * 9) BUY STOCK
 ********************************************************/
async function buyStock() {
    if (isBuying) return;
    isBuying = true;
    const buyButton = document.getElementById('buy-button');
    buyButton.disabled = true;
    displayLoader(true);

    const symbolInput = document.getElementById('stock-symbol').value.trim();
    const quantityInput = document.getElementById('quantity').value;
    const symbol = symbolInput.toUpperCase();
    const quantity = parseInt(quantityInput);

    if (!symbol) {
        displayErrorMessage("Bitte gib ein Aktiensymbol ein.");
        isBuying = false;
        buyButton.disabled = false;
        displayLoader(false);
        return;
    }

    if (!quantity || quantity <= 0 || isNaN(quantity)) {
        displayErrorMessage("Bitte gib eine gültige positive Anzahl ein.");
        isBuying = false;
        buyButton.disabled = false;
        displayLoader(false);
        return;
    }

    try {
        const price = await fetchStockPrice(symbol);
        if (price <= 0) {
            displayErrorMessage("Ungültiges Aktiensymbol oder Preis konnte nicht abgerufen werden.");
            isBuying = false;
            buyButton.disabled = false;
            displayLoader(false);
            return;
        }

        const totalCost = price * quantity;
        if (totalCost > budget) {
            displayErrorMessage("Nicht genügend Bargeldsaldo.");
            isBuying = false;
            buyButton.disabled = false;
            displayLoader(false);
            return;
        }

        // Deduct the cost from budget
        budget -= totalCost;

        // If the stock already exists in the portfolio, aggregate the quantity and total invested
        if (portfolio[symbol]) {
            portfolio[symbol].quantity += quantity;
            portfolio[symbol].totalInvested += totalCost;
        } else {
            // Initialize the stock in the portfolio
            portfolio[symbol] = {
                quantity: quantity,
                totalInvested: totalCost
            };
        }

        // Update UI and Data
        updateBudget();
        await updatePortfolioTable();
        sendPortfolioUpdate(); // Notify parent
        saveUserData(); // Save to Firebase
        displaySuccessMessage(`Erfolgreich ${quantity} Aktien von ${symbol} gekauft.`);
        console.log(`Gekauft: ${quantity} Aktien von ${symbol} zu je $${price.toFixed(2)}.`);
    } catch (error) {
        console.error("Fehler beim Kauf der Aktie:", error);
        displayErrorMessage("Beim Kauf der Aktie ist ein Fehler aufgetreten.");
    } finally {
        isBuying = false;
        buyButton.disabled = false;
        displayLoader(false);
    }
}

/********************************************************
 * 10) SELL STOCK FROM PORTFOLIO FUNCTION
 ********************************************************/
async function sellStock(symbol) {
    symbol = symbol.toUpperCase();
    const totalQuantity = getTotalQuantity(symbol);
    const quantityToSellStr = prompt(`Gib die Anzahl der zu verkaufenden Aktien ein (Verfügbar: ${totalQuantity}):`, totalQuantity);
    if (quantityToSellStr === null) return; // User cancelled
    const quantityToSell = parseInt(quantityToSellStr);
    if (!quantityToSell || quantityToSell <= 0 || isNaN(quantityToSell)) {
        displayErrorMessage("Bitte gib eine gültige positive Anzahl ein.");
        return;
    }
    if (quantityToSell > totalQuantity) {
        displayErrorMessage("Nicht genügend Aktien zum Verkaufen.");
        return;
    }
    await sellStockWithQuantity(symbol, quantityToSell);
}

async function sellStockWithQuantity(symbol, quantity) {
    symbol = symbol.toUpperCase();
    if (!portfolio[symbol] || getTotalQuantity(symbol) < quantity) {
        displayErrorMessage("Nicht genügend Aktien zum Verkaufen.");
        return;
    }

    try {
        const price = await fetchStockPrice(symbol);
        if (price <= 0) {
            displayErrorMessage("Ungültiges Aktiensymbol oder Preis konnte nicht abgerufen werden.");
            return;
        }

        const totalRevenue = price * quantity;

        // Add the revenue to the budget
        budget += totalRevenue;

        // Calculate average purchase price
        const purchasePrice = portfolio[symbol].totalInvested / portfolio[symbol].quantity;

        // Update the portfolio
        portfolio[symbol].quantity -= quantity;
        portfolio[symbol].totalInvested -= purchasePrice * quantity;

        // Wenn die Menge null ist, entferne das Symbol aus dem Portfolio
        if (portfolio[symbol].quantity === 0) {
            delete portfolio[symbol];
        }

        // Update UI und Daten
        updateBudget();
        await updatePortfolioTable();
        sendPortfolioUpdate(); // Notify parent
        saveUserData(); // Save to Firebase
        displaySuccessMessage(`Erfolgreich ${quantity} Aktien von ${symbol} verkauft.`);
        console.log(`Verkauft: ${quantity} Aktien von ${symbol} zu je $${price.toFixed(2)}.`);
    } catch (error) {
        console.error("Fehler beim Verkauf der Aktie:", error);
        displayErrorMessage("Beim Verkauf der Aktie ist ein Fehler aufgetreten.");
    }
}

/********************************************************
 * 11) GET TOTAL QUANTITY OF A STOCK
 ********************************************************/
function getTotalQuantity(symbol) {
    symbol = symbol.toUpperCase();
    return portfolio[symbol] ? portfolio[symbol].quantity : 0;
}

/********************************************************
 * 12) UPDATE BUDGET DISPLAY
 ********************************************************/
function updateBudget() {
    document.getElementById('budget').innerText = budget.toFixed(2);
    calculateTotalProfit();
}

/********************************************************
 * 13) UPDATE PORTFOLIO TABLE
 ********************************************************/
async function updatePortfolioTable() {
    const tbody = document.getElementById('portfolioTableBody');
    tbody.innerHTML = '';

    let totalPortfolioValue = 0;
    let totalProfit = 0;

    const symbols = Object.keys(portfolio);

    // Array zur Sammlung aller Preisabfragen
    const pricePromises = symbols.map(symbol => fetchStockPrice(symbol));

    // Warten bis alle Preise abgerufen wurden
    const prices = await Promise.all(pricePromises);

    symbols.forEach((symbol, index) => {
        const stockData = portfolio[symbol];
        const totalQuantity = stockData.quantity;
        const purchasePrice = stockData.totalInvested / totalQuantity; // Renamed from averagePurchasePrice

        const currentPrice = prices[index];
        const totalCurrentValue = currentPrice * totalQuantity;
        const profit = (currentPrice - purchasePrice) * totalQuantity;
        const percentageProfit = ((currentPrice - purchasePrice) / purchasePrice) * 100;

        // Create table row
        const row = document.createElement('tr');

        // Symbol
        const symbolCell = document.createElement('td');
        symbolCell.innerText = symbol;
        row.appendChild(symbolCell);

        // Quantity
        const quantityCell = document.createElement('td');
        quantityCell.innerText = totalQuantity;
        row.appendChild(quantityCell);

        // Kaufpreis (Purchase Price) - Updated from Durchschnittlicher Preis
        const purchasePriceCell = document.createElement('td');
        purchasePriceCell.innerText = `$${purchasePrice.toFixed(2)}`;
        row.appendChild(purchasePriceCell);

        // Current Price
        const currentPriceCell = document.createElement('td');
        currentPriceCell.innerText = `$${currentPrice.toFixed(2)}`;
        row.appendChild(currentPriceCell);

        // Gewinn/Verlust - Now includes both amount and percentage
        const profitCell = document.createElement('td');
        profitCell.innerHTML = `$${profit.toFixed(2)} (${percentageProfit.toFixed(2)}%)`;
        profitCell.classList.add(profit >= 0 ? 'profit-positive' : 'profit-negative');
        row.appendChild(profitCell);

        // Action Cell with Sell Button
        const actionCell = document.createElement('td');
        const sellButton = document.createElement('button');
        sellButton.innerText = 'Verkaufen';
        sellButton.onclick = () => sellStock(symbol);
        actionCell.appendChild(sellButton);
        row.appendChild(actionCell);

        // Append row to table body
        tbody.appendChild(row);

        // Accumulate totals
        totalPortfolioValue += totalCurrentValue;
        totalProfit += profit;
    });

    document.getElementById('portfolioValue').innerText = (budget + totalPortfolioValue).toFixed(2);
    document.getElementById('totalProfit').innerText = `$${totalProfit.toFixed(2)}`;
    calculateTotalProfit();
}

/********************************************************
 * 14) CALCULATE TOTAL PROFIT AND PROFIT PERCENTAGE
 ********************************************************/
async function calculateTotalProfit() {
    let totalProfit = 0;
    let totalPortfolioValue = 0;

    const symbols = Object.keys(portfolio);

    // Array zur Sammlung aller Preisabfragen
    const pricePromises = symbols.map(symbol => fetchStockPrice(symbol));

    // Warten bis alle Preise abgerufen wurden
    const prices = await Promise.all(pricePromises);

    symbols.forEach((symbol, index) => {
        const stockData = portfolio[symbol];
        const totalQuantity = stockData.quantity;
        const purchasePrice = stockData.totalInvested / totalQuantity; // Renamed from averagePurchasePrice

        const currentPrice = prices[index];
        const profit = (currentPrice - purchasePrice) * totalQuantity;
        totalProfit += profit;
        totalPortfolioValue += currentPrice * totalQuantity;
    });

    document.getElementById('totalProfit').innerText = `$${totalProfit.toFixed(2)}`;
    document.getElementById('portfolioValue').innerText = (budget + totalPortfolioValue).toFixed(2);

    const totalProfitAmount = (budget + totalPortfolioValue) - initialCapital;
    const percent = (totalProfitAmount / initialCapital) * 100;
    document.getElementById('totalProfitPercent').innerText = `${percent.toFixed(2)}%`;
}

/********************************************************
 * 15) SEND PORTFOLIO_UPDATE TO PARENT
 ********************************************************/
function sendPortfolioUpdate() {
    const data = {
        type: 'PORTFOLIO_UPDATE',
        budget: budget,
        portfolio: portfolio
    };
    window.parent.postMessage(data, '*'); // Für Sicherheit: Ersetze '*' mit deiner spezifischen Herkunft
    console.log("PORTFOLIO_UPDATE an Parent gesendet:", data);
}

/********************************************************
 * 16) NORMALIZE PORTFOLIO SYMBOLS TO UPPERCASE
 ********************************************************/
function normalizePortfolioSymbols(originalPortfolio) {
    const normalizedPortfolio = {};
    for (const symbol in originalPortfolio) {
        const upperSymbol = symbol.toUpperCase();
        if (!normalizedPortfolio[upperSymbol]) {
            normalizedPortfolio[upperSymbol] = {
                quantity: 0,
                totalInvested: 0
            };
        }
        normalizedPortfolio[upperSymbol].quantity += originalPortfolio[symbol].quantity;
        normalizedPortfolio[upperSymbol].totalInvested += originalPortfolio[symbol].totalInvested;
    }
    return normalizedPortfolio;
}

/********************************************************
 * 17) DISPLAY SUCCESS AND ERROR MESSAGES
 ********************************************************/
function displaySuccessMessage(message) {
    displayMessage(message, 'success');
}
function displayErrorMessage(message) {
    displayMessage(message, 'error');
}
function displayMessage(message, type) {
    const container = document.getElementById('message-container');
    const div = document.createElement('div');
    div.classList.add('message', type);
    div.innerHTML = `
        <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
        <span>${message}</span>
    `;
    container.appendChild(div);
    setTimeout(() => div.remove(), 4000);
}

/********************************************************
 * 18) DISPLAY LOADER
 ********************************************************/
function displayLoader(show) {
    const loader = document.getElementById('loader');
    loader.style.display = show ? 'block' : 'none';
}

/********************************************************
 * 19) SAVE USER DATA TO FIREBASE
 ********************************************************/
function saveUserData() {
    const user = firebase.auth().currentUser;
    if (user) {
        const userId = user.uid;
        const userRef = database.ref('users/' + userId);
        userRef.set({
            budget: budget,
            portfolio: portfolio
        }, (error) => {
            if (error) {
                console.error("Fehler beim Speichern der Daten:", error);
                displayErrorMessage("Fehler beim Speichern der Benutzerdaten.");
            } else {
                console.log("Daten erfolgreich gespeichert.");
            }
        });
    }
}

/********************************************************
 * 20) INITIALIZE TRADINGVIEW WIDGET AND STOCK LIST
 ********************************************************/
window.onload = async function() {
    // Create default TradingView widget
    createTradingViewWidget('AAPL');
    currentSymbol = 'AAPL';
    await fetchStockList();
};
    </script>
</body>
</html>
